# coding: utf-8

"""
    Orders v0

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenInterval(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'OpenTimeInterval',
        'end_time': 'OpenTimeInterval'
    }

    attribute_map = {
        'start_time': 'StartTime',
        'end_time': 'EndTime'
    }

    def __init__(self, start_time=None, end_time=None):  # noqa: E501
        """OpenInterval - a model defined in Swagger"""  # noqa: E501

        self._start_time = None
        self._end_time = None
        self.discriminator = None

        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def start_time(self):
        """Gets the start_time of this OpenInterval.  # noqa: E501

        The time when the business opens.  # noqa: E501

        :return: The start_time of this OpenInterval.  # noqa: E501
        :rtype: OpenTimeInterval
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this OpenInterval.

        The time when the business opens.  # noqa: E501

        :param start_time: The start_time of this OpenInterval.  # noqa: E501
        :type: OpenTimeInterval
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this OpenInterval.  # noqa: E501

        The time when the business closes.  # noqa: E501

        :return: The end_time of this OpenInterval.  # noqa: E501
        :rtype: OpenTimeInterval
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this OpenInterval.

        The time when the business closes.  # noqa: E501

        :param end_time: The end_time of this OpenInterval.  # noqa: E501
        :type: OpenTimeInterval
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenInterval, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenInterval):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
